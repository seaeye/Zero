<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntLibContrib.Data.OdpNet</name>
    </assembly>
    <members>
        <member name="T:EntLibContrib.Data.OdpNet.Configuration.OracleDatabaseData">
            <summary>
            Describes a <see cref="T:EntLibContrib.Data.OdpNet.OracleDatabase"/> instance, aggregating information from a 
            <see cref="T:System.Configuration.ConnectionStringSettings"/> and any Oracle-specific database information.
            </summary>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.Configuration.OracleDatabaseData.#ctor(System.Configuration.ConnectionStringSettings,System.Func{System.String,System.Configuration.ConfigurationSection})">
            <summary>
            
            </summary>
            <param name="connectionStringSettings"></param>
            <param name="configurationSource"></param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.Configuration.OracleDatabaseData.BuildDatabase">
            <summary>
            Builds the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> represented by this configuration object.
            </summary>
            <returns>
            A database.
            </returns>
        </member>
        <member name="P:EntLibContrib.Data.OdpNet.Configuration.OracleDatabaseData.PackageMappings">
            <summary>
             Gets the Oracle package mappings for the represented database.
            </summary>
        </member>
        <member name="T:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1">
            <summary>
            Represents a stored procedure call to the database that will return an enumerable of <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">The element type that will be used to consume the result set.</typeparam>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1.#ctor(EntLibContrib.Data.OdpNet.OracleDatabase,System.String,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{`0})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.SprocAccessor`1"/> that works for a specific <paramref name="database"/>
            and uses <paramref name="rowMapper"/> to convert the returned rows to clr type <typeparamref name="TResult"/>.
            </summary>
            <param name="database">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> used to execute the Transact-SQL.</param>
            <param name="procedureName">The stored procedure that will be executed.</param>
            <param name="rowMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper`1"/> that will be used to convert the returned data to clr type <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1.#ctor(EntLibContrib.Data.OdpNet.OracleDatabase,System.String,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{`0})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.SprocAccessor`1"/> that works for a specific <paramref name="database"/>
            and uses <paramref name="resultSetMapper"/> to convert the returned set to an enumerable of clr type <typeparamref name="TResult"/>.
            </summary>
            <param name="database">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> used to execute the Transact-SQL.</param>
            <param name="procedureName">The stored procedure that will be executed.</param>
            <param name="resultSetMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper`1"/> that will be used to convert the returned set to an enumerable of clr type <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1.#ctor(EntLibContrib.Data.OdpNet.OracleDatabase,System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{`0})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.SprocAccessor`1"/> that works for a specific <paramref name="database"/>
            and uses <paramref name="rowMapper"/> to convert the returned rows to clr type <typeparamref name="TResult"/>.
            The <paramref name="parameterMapper"/> will be used to interpret the parameters passed to the Execute method.
            </summary>
            <param name="database">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> used to execute the Transact-SQL.</param>
            <param name="procedureName">The stored procedure that will be executed.</param>
            <param name="parameterMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper"/> that will be used to interpret the parameters passed to the Execute method.</param>
            <param name="rowMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper`1"/> that will be used to convert the returned data to clr type <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1.#ctor(EntLibContrib.Data.OdpNet.OracleDatabase,System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{`0})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.SprocAccessor`1"/> that works for a specific <paramref name="database"/>
            and uses <paramref name="resultSetMapper"/> to convert the returned set to an enumerable of clr type <typeparamref name="TResult"/>.
            The <paramref name="parameterMapper"/> will be used to interpret the parameters passed to the Execute method.
            </summary>
            <param name="database">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> used to execute the Transact-SQL.</param>
            <param name="procedureName">The stored procedure that will be executed.</param>
            <param name="parameterMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper"/> that will be used to interpret the parameters passed to the Execute method.</param>
            <param name="resultSetMapper">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper`1"/> that will be used to convert the returned set to an enumerable of clr type <typeparamref name="TResult"/>.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleSprocAccessor`1.Execute(System.Object[])">
            <summary>
            Executes the stored procedure and returns an enumerable of <typeparamref name="TResult"/>.
            The enumerable returned by this method uses deferred loading to return the results.
            </summary>
            <param name="parameterValues">Values that will be interpret by an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper"/> and function as parameters to the stored procedure.</param>
            <returns>An enumerable of <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:EntLibContrib.Data.OdpNet.OracleDatabase">
            <summary>
            Represents an Oracle database.
            </summary>
            <remarks>
            <para>
            When retrieving a result set, it will build the package name. The package name should be set based
            on the stored procedure prefix and this should be set via configuration. For
            example, a package name should be set as prefix of "ENTLIB_" and package name of
            "pkgENTLIB_ARCHITECTURE". For your applications, this is required only if you are defining your stored procedures returning
            ref cursors.
            </para>
            <para>
            This is a direct copy of the Enterprise Library Oracle Data Provider from Microsoft only using the ODP.NET data client from
            Oracle instead of the Microsoft one plus a few additional features.
            </para>
            </remarks>
        </member>
        <member name="F:EntLibContrib.Data.OdpNet.OracleDatabase.Instance">
            <summary>
            The OracleClientFactory instance.
            </summary>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EntLibContrib.Data.OdpNet.OracleDatabase"/> class with a connection string and a list of Oracle packages.
            </summary>
            <param name="connectionString">The connection string for the database.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Data.Oracle.IOraclePackage})">
            <summary>
            Initializes a new instance of the <see cref="T:EntLibContrib.Data.OdpNet.OracleDatabase"/> class with a connection string and a list of Oracle packages.
            </summary>
            <param name="connectionString">The connection string for the database.</param>
            <param name="packages">A list of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Oracle.IOraclePackage"/> objects.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.AddParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of a <see cref="T:System.Data.Common.DbParameter"/> object to the command.</para>
            </summary>
            <param name="command">The command to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="dbType"><para>One of the <see cref="T:System.Data.DbType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>A value indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>       
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.AddParameter(System.Data.Common.DbCommand,System.String,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            <para>Adds a new instance of an <see cref="T:Oracle.DataAccess.Client.OracleParameter"/> object to the command.</para>
            </summary>
            <param name="command">The <see cref="T:Oracle.DataAccess.Client.OracleCommand"/> to add the parameter.</param>
            <param name="name"><para>The name of the parameter.</para></param>
            <param name="oracleType"><para>One of the <see cref="!:OracleType"/> values.</para></param>
            <param name="size"><para>The maximum size of the data within the column.</para></param>
            <param name="direction"><para>One of the <see cref="T:System.Data.ParameterDirection"/> values.</para></param>
            <param name="nullable"><para>A value indicating whether the parameter accepts <see langword="null"/> (<b>Nothing</b> in Visual Basic) values.</para></param>
            <param name="precision"><para>The maximum number of digits used to represent the <paramref name="value"/>.</para></param>
            <param name="scale"><para>The number of decimal places to which <paramref name="value"/> is resolved.</para></param>
            <param name="sourceColumn"><para>The name of the source column mapped to the DataSet and used for loading or returning the <paramref name="value"/>.</para></param>
            <param name="sourceVersion"><para>One of the <see cref="T:System.Data.DataRowVersion"/> values.</para></param>
            <param name="value"><para>The value of the parameter.</para></param>      
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Creates an <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/> based on the <paramref name="command"/>.
            </summary>
            <param name="command">The command wrapper to execute.</param>        
            <returns>An <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/> object.</returns>        
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="command"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateWrappedReader(Microsoft.Practices.EnterpriseLibrary.Data.DatabaseConnectionWrapper,System.Data.IDataReader)">
            <summary>
            All data readers get wrapped in objects so that they properly manage connections.
            Some derived Database classes will need to create a different wrapper, so this
            method is provided so that they can do this.
            </summary>
            <param name="connection">Connection + refcount.</param>
            <param name="innerReader">The reader to wrap.</param>
            <returns>The new reader.</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteReader(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Creates an <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/> based on the <paramref name="command"/>.</para>
            </summary>        
            <param name="command"><para>The command wrapper to execute.</para></param>        
            <param name="transaction"><para>The transaction to participate in when executing this reader.</para></param>        
            <returns><para>An <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/> object.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="command"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="transaction"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            <para>Executes a command and returns the results in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The command to execute to fill the <see cref="T:System.Data.DataSet"/></para></param>
            <returns><para>A <see cref="T:System.Data.DataSet"/> filed with records and, if necessary, schema.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="command"/> can not be <see langword="null"/> (Nothing in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteDataSet(System.Data.Common.DbCommand,System.Data.Common.DbTransaction)">
            <summary>
            <para>Executes a command and returns the result in a new <see cref="T:System.Data.DataSet"/>.</para>
            </summary>
            <param name="command"><para>The command to execute to fill the <see cref="T:System.Data.DataSet"/></para></param>
            <param name="transaction"><para>The transaction to participate in when executing this reader.</para></param>        
            <returns><para>A <see cref="T:System.Data.DataSet"/> filed with records and, if necessary, schema.</para></returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="command"/> can not be <see langword="null"/> (<b>Nothing</b> in Visual Basic).</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="command"/> can not be <see langword="null"/> (<b>Nothing</b> in Visual Basic).</para>
            <para>- or -</para>
            <para><paramref name="transaction"/> can not be <see langword="null"/> (<b>Nothing</b> in Visual Basic).</para>
            </exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[])">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/>.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.LoadDataSet(System.Data.Common.DbCommand,System.Data.DataSet,System.String[],System.Data.Common.DbTransaction)">
            <summary>
            <para>Loads a <see cref="T:System.Data.DataSet"/> from a <see cref="T:System.Data.Common.DbCommand"/> in a transaction.</para>
            </summary>
            <param name="command">
            <para>The command to execute to fill the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="dataSet">
            <para>The <see cref="T:System.Data.DataSet"/> to fill.</para>
            </param>
            <param name="tableNames">
            <para>An array of table name mappings for the <see cref="T:System.Data.DataSet"/>.</para>
            </param>
            <param name="transaction">
            <para>The <see cref="T:System.Data.IDbTransaction"/> to execute the command in.</para>
            </param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.GetParameterValue(System.Data.Common.DbCommand,System.String)">
            <summary>
            Gets a parameter value.
            </summary>
            <param name="command">The command that contains the parameter.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.SetParameterValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Sets a parameter value.
            </summary>
            <param name="command">The command with the parameter.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.PrepareCWRefCursor(System.Data.Common.DbCommand)">
            <devdoc>
            This is a private method that will build the Oracle package name if your stored procedure
            has proper prefix and postfix. 
            This functionality is include for
            the portability of the architecture between SQL and Oracle datbase.
            This method also adds the reference cursor to the command writer if not already added.
            </devdoc>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ConvertBoolToShort(System.Object)">
            <summary>
            Converts a Boolean object to a short or DBNull if null.
            </summary>
            <remarks>This is specifically used in the conversion of a Boolean to OracleDbType.Int16.
            Contrary to most interpretations of a boolean value a value of 0 (zero) stored in a Database
            is generally regarded as representing false.</remarks>
            <param name="value">The boolean value.</param>
            <returns>short integer of 0 for false and 1 for true</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ConvertShortToBool(System.Object)">
            <summary>
            Converts a short object to Boolean.
            </summary>
            <remarks>This is specifically used in the conversion of OracleDbType.Int16 back to Boolean</remarks>
            <param name="value">The short value.</param>
            <returns>Boolean object or DBNull</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ConvertGuidToByteArray(System.Object)">
            <summary>
            Converts a GUID object to a byte array or DBNull if null.
            </summary>
            <remarks>This is specifically used in the conversion of a Guid to OracleDbType.Raw</remarks>
            <param name="value">The Guid value.</param>
            <returns>byte array or DBNull</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ConvertByteArrayToGuid(System.Object)">
            <summary>
            Converts a byte array object to GUID.
            </summary>
            <remarks>This is specifically used in the conversion of OracleDbType.Raw back to Guid</remarks>
            <param name="value">The value.</param>
            <returns>Guid object or DBNull</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.OnOracleRowUpdated(System.Object,Oracle.DataAccess.Client.OracleRowUpdatedEventArgs)">
            <devdoc>
            Listens for the RowUpdate event on a data adapter to support UpdateBehavior.Continue
            </devdoc>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.Common.DbCommand"/> and populates the Parameters collection of the specified <see cref="T:System.Data.Common.DbCommand"/> object. 
            </summary>
            <param name="discoveryCommand">The <see cref="T:System.Data.Common.DbCommand"/> to do the discovery.</param>
            <remarks>
            The <see cref="T:System.Data.Common.DbCommand"/> must be an instance of a <see cref="T:Oracle.DataAccess.Client.OracleCommand"/> object.
            </remarks>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.GetStoredProcCommand(System.String,System.Object[])">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>
            <param name="parameterValues"><para>The list of parameters for the procedure.</para></param>
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.AssignParameters(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            <para>Discovers parameters on the <paramref name="command"/> and assigns the values from <paramref name="parameterValues"/> to the <paramref name="command"/>s Parameters list.</para>
            </summary>
            <param name="command">The command the parameeter values will be assigned to</param>
            <param name="parameterValues">The parameter values that will be assigned to the command.</param>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.GetStoredProcCommand(System.String)">
            <summary>
            <para>Creates a <see cref="T:System.Data.Common.DbCommand"/> for a stored procedure.</para>
            </summary>
            <param name="storedProcedureName"><para>The name of the stored procedure.</para></param>		
            <returns><para>The <see cref="T:System.Data.Common.DbCommand"/> for the stored procedure.</para></returns>
            <remarks>
            <para>The parameters for the stored procedure will be discovered and the values are assigned in positional order.</para>
            </remarks>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.TranslatePackageSchema(System.String)">
            <devdoc>
            Looks into configuration and gets the information on how the command wrapper should be updated if calling a package on this
            connection.
            </devdoc>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.SetUpRowUpdatedEvent(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the RowUpdated event for the data adapter.
            </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter"/> to set the event.</param>
            <remarks>The <see cref="T:System.Data.Common.DbDataAdapter"/> must be an <see cref="T:Oracle.DataAccess.Client.OracleDataAdapter"/>.</remarks>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.SameNumberOfParametersAndValues(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Determines if the number of parameters in the command matches the array of parameter values.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> containing the parameters.</param>
            <param name="values">The array of parameter values.</param>
            <returns><see langword="true"/> if the number of parameters and values match; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0},System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="rowMapper"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0},System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <param name="rowMapper"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{``0},System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="resultSetMapper"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.ExecuteOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{``0},System.Object[])">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <param name="resultSetMapper"></param>
            <param name="parameterValues"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String)">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper)">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0})">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="rowMapper"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0})">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <param name="rowMapper"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{``0})">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="resultSetMapper"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDatabase.CreateOracleSprocAccessor``1(System.String,Microsoft.Practices.EnterpriseLibrary.Data.IParameterMapper,Microsoft.Practices.EnterpriseLibrary.Data.IResultSetMapper{``0})">
            <summary>
            
            </summary>
            <param name="procedureName"></param>
            <param name="parameterMapper"></param>
            <param name="resultSetMapper"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:EntLibContrib.Data.OdpNet.OracleDatabase.SupportsParemeterDiscovery">
            <summary>
            Does this <see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/> object support parameter discovery?
            </summary>
            <value>true.</value>
        </member>
        <member name="T:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The converted value of the column.</returns>
            <remarks>
            Bit data type is mapped to a number in Oracle database. When reading bit data from Oracle database,
            it will map to 0 as false and everything else as true.  This method uses System.Convert.ToBoolean() method
            for type conversions.
            </remarks>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column converted to an 8-bit unsigned integer. 
            </summary>
            <param name="index">The zero-based column ordinal.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
            <remarks> This method uses System.Convert.ToByte() method
            for type conversions.</remarks>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified field converted to a GUID.
            </summary>
            <param name="index">The index of the field to find.</param>
            <returns>The GUID of the specified field.</returns>
            <remarks>
            This method will cast the result data Guid data type. In Oracle you must use that as Raw(16) so
            that this method can convert that to Guid properly.
            </remarks>        
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified field converted to a 16-bit signed integer.
            </summary>
            <param name="index">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
        </member>
        <member name="P:EntLibContrib.Data.OdpNet.OracleDataReaderWrapper.InnerReader">
            <summary>
            Gets the wrapped <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/>.
            </summary>
        </member>
        <member name="T:EntLibContrib.Data.OdpNet.RefCountingOracleDataReaderWrapper">
            <summary>
            Another wrapper for <see cref="T:Oracle.DataAccess.Client.OracleDataReader"/> that adds connection
            reference counting.
            </summary>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.RefCountingOracleDataReaderWrapper.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"/> Object.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:EntLibContrib.Data.OdpNet.RefCountingOracleDataReaderWrapper.Dispose(System.Boolean)">
            <summary>
            Close the contained data reader when disposing and releases the connection
            if it's not used anymore.
            </summary>
            <param name="disposing">True if called from Dispose method, false if called from finalizer. Since
            this class doesn't have a finalizer, this will always be true.</param>
        </member>
    </members>
</doc>
